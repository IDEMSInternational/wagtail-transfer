{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Wagtail Transfer Documentation Wagtail Transfer is an extension for the Wagtail CMS which allows content to be transferred between multiple instances of a Wagtail project: for example, from a staging site to a production site. Features Imports Page trees from other Wagtail instances Identifies previously imported content and updates it instead Imports referenced models such as images, documents, and snippets Configurable: can define non-importable models, and models to update","title":"Home"},{"location":"#welcome-to-the-wagtail-transfer-documentation","text":"Wagtail Transfer is an extension for the Wagtail CMS which allows content to be transferred between multiple instances of a Wagtail project: for example, from a staging site to a production site.","title":"Welcome to the Wagtail Transfer Documentation"},{"location":"#features","text":"Imports Page trees from other Wagtail instances Identifies previously imported content and updates it instead Imports referenced models such as images, documents, and snippets Configurable: can define non-importable models, and models to update","title":"Features"},{"location":"basic_usage/","text":"Basic Usage Open the Wagtail Admin on the destination site. In the menu, select Import Pages . Select a source site. Using the page chooser, select a parent page on the source site. This page, and all of its descendants, will be imported. If this page was not previously imported, you will be prompted to select a page on the destination site: the imported page tree will be created as a child of this page. If the page has already been imported on the destination site, the existing page/s will be updated and you will not need to select a destination parent page. Click the import button, which tells you how many pages will be imported. The pages - and, depending on your configuration , their associated objects, such as images and documents - will now be available on the destination site.","title":"Basic Usage"},{"location":"basic_usage/#basic-usage","text":"Open the Wagtail Admin on the destination site. In the menu, select Import Pages . Select a source site. Using the page chooser, select a parent page on the source site. This page, and all of its descendants, will be imported. If this page was not previously imported, you will be prompted to select a page on the destination site: the imported page tree will be created as a child of this page. If the page has already been imported on the destination site, the existing page/s will be updated and you will not need to select a destination parent page. Click the import button, which tells you how many pages will be imported. The pages - and, depending on your configuration , their associated objects, such as images and documents - will now be available on the destination site.","title":"Basic Usage"},{"location":"how_it_works/","text":"How It Works ID Mapping When transferring content between Wagtail instances, it's important to keep track of previously imported content: which models on the source site correspond to which on the destination site. Doing so means that when a model is re-imported, the version on the destination site can be updated, rather than recreated. However, the local ids aren't guaranteed to be the same between source and destination sites, so can't be used directly. Instead, when a model is imported for the first time, Wagtail Transfer creates an instance of IDMapping : a model which maps a local id and model class to a unique ID (UID). This IDMapping maps source and destination site local ids to the same UID, which allows Wagtail Transfer to identify re-imported content. It's also possible to identify models by their fields, rather than via IDMapping s. This can be accomplished using the WAGTAILTRANSFER_LOOKUP_FIELDS setting. Finding References When importing a model, Wagtail Transfer identifies other models it refers to: for instance, via ForeignKeys , or as references in rich text. Wagtail Transfer will attempt to recursively import unimported referenced models, until encountering a model listed in WAGTAILTRANSFER_NO_FOLLOW_MODELS (by default, Page ). At that point the reference will be broken if possible, but if the reference is required for import then the referencing model will not be imported. Non- Page models which already exist on both sites will not be updated unless they are listed in WAGTAILTRANSFER_UPDATE_RELATED_MODELS .","title":"How It Works"},{"location":"how_it_works/#how-it-works","text":"","title":"How It Works"},{"location":"how_it_works/#id-mapping","text":"When transferring content between Wagtail instances, it's important to keep track of previously imported content: which models on the source site correspond to which on the destination site. Doing so means that when a model is re-imported, the version on the destination site can be updated, rather than recreated. However, the local ids aren't guaranteed to be the same between source and destination sites, so can't be used directly. Instead, when a model is imported for the first time, Wagtail Transfer creates an instance of IDMapping : a model which maps a local id and model class to a unique ID (UID). This IDMapping maps source and destination site local ids to the same UID, which allows Wagtail Transfer to identify re-imported content. It's also possible to identify models by their fields, rather than via IDMapping s. This can be accomplished using the WAGTAILTRANSFER_LOOKUP_FIELDS setting.","title":"ID Mapping"},{"location":"how_it_works/#finding-references","text":"When importing a model, Wagtail Transfer identifies other models it refers to: for instance, via ForeignKeys , or as references in rich text. Wagtail Transfer will attempt to recursively import unimported referenced models, until encountering a model listed in WAGTAILTRANSFER_NO_FOLLOW_MODELS (by default, Page ). At that point the reference will be broken if possible, but if the reference is required for import then the referencing model will not be imported. Non- Page models which already exist on both sites will not be updated unless they are listed in WAGTAILTRANSFER_UPDATE_RELATED_MODELS .","title":"Finding References"},{"location":"settings/","text":"Settings WAGTAILTRANSFER_SECRET_KEY WAGTAILTRANSFER_SECRET_KEY = '7cd5de8229be75e1e0c2af8abc2ada7e' The secret key used to authenticate requests to import content from this site to another. The secret key in the matching part of the importing site's WAGTAILTRANSFER_SOURCES must be identical, or the transfer will be rejected - this prevents unauthorised import of sensitive data. WAGTAILTRANSFER_SOURCES WAGTAILTRANSFER_SOURCES = { 'staging' : { 'BASE_URL' : 'https://staging.example.com/wagtail-transfer/' , 'SECRET_KEY' : '4ac4822149691395773b2a8942e1a472' , }, 'production' : { 'BASE_URL' : 'https://www.example.com/wagtail-transfer/' , 'SECRET_KEY' : 'a36476ffc6af34dc935570d97369eca0' , }, } A dictionary defining the sites available to import from, and their secret keys. WAGTAILTRANSFER_UPDATE_RELATED_MODELS WAGTAILTRANSFER_UPDATE_RELATED_MODELS = [ 'wagtailimages.image' , 'adverts.advert' ] Specifies a list of models that, whenever we encounter references to them in imported content, should be updated to the latest version from the source site as part of the import. Whenever an object being imported contains a reference to a related object (through a ForeignKey, RichTextField or StreamField), the 'importance' of that related object will tend to vary according to its type. For example, a reference to an Image object within a page usually means that the image will be shown on that page; in this case, the Image model is sufficiently important to the imported page that we want the importer to not only ensure that image exists at the destination, but is updated to its newest version as well. Contrast this with the example of an 'author' snippet attached to blog posts, containing various fields of data about that person (e.g. bio, social media links); in this case, the author information is not really part of the blog post, and it's not expected that we would update it when running an import of blog posts. WAGTAILTRANSFER_LOOKUP_FIELDS WAGTAILTRANSFER_LOOKUP_FIELDS = { 'blog.author' : [ 'first_name' , 'surname' ]} Specifies a list of fields to use for object lookups on the given models. Normally, imported objects will be assigned a random UUID known across all sites, so that those objects can be recognised on subsequent imports and be updated rather than creating a duplicate. This behaviour is less useful for models that already have a uniquely identifying field, or set of fields, such as an author identified by first name and surname - if the same author exists on the source and destination site, but this was not the result of a previous import, then the UUID-based matching will consider them distinct, and attempt to create a duplicate author record at the destination. Adding an entry in WAGTAILTRANSFER_LOOKUP_FIELDS will mean that any imported instances of the given model will be looked up based on the specified fields, rather than by UUID. WAGTAILTRANSFER_NO_FOLLOW_MODELS WAGTAILTRANSFER_NO_FOLLOW_MODELS = [ 'wagtailcore.page' , 'organisations.Company' ] Specifies a list of models that should not be imported by association when they are referenced from imported content. Defaults to ['wagtailcore.page'] . By default, objects referenced within imported content will be recursively imported to ensure that those references are still valid on the destination site. However, this is not always desirable - for example, if this happened for the Page model, this would imply that any pages linked from an imported page would get imported as well, along with any pages linked from those pages, and so on, leading to an unpredictable number of extra pages being added anywhere in the page tree as a side-effect of the import. Models listed in WAGTAILTRANSFER_NO_FOLLOW_MODELS will thus be skipped in this process, leaving the reference unresolved. The effect this has on the referencing page will vary according to the kind of relation: nullable foreign keys, one-to-many and many-to-many relations will simply omit the missing object; references in rich text and StreamField will become broken links (just as linking a page and then deleting it would); while non-nullable foreign keys will prevent the object from being created at all (meaning that any objects referencing that object will end up with unresolved references, to be handled by the same set of rules). Note that these settings do not accept models that are defined as subclasses through multi-table inheritance - in particular, they cannot be used to define behaviour that only applies to specific subclasses of Page.","title":"Settings Reference"},{"location":"settings/#settings","text":"","title":"Settings"},{"location":"settings/#wagtailtransfer_secret_key","text":"WAGTAILTRANSFER_SECRET_KEY = '7cd5de8229be75e1e0c2af8abc2ada7e' The secret key used to authenticate requests to import content from this site to another. The secret key in the matching part of the importing site's WAGTAILTRANSFER_SOURCES must be identical, or the transfer will be rejected - this prevents unauthorised import of sensitive data.","title":"WAGTAILTRANSFER_SECRET_KEY"},{"location":"settings/#wagtailtransfer_sources","text":"WAGTAILTRANSFER_SOURCES = { 'staging' : { 'BASE_URL' : 'https://staging.example.com/wagtail-transfer/' , 'SECRET_KEY' : '4ac4822149691395773b2a8942e1a472' , }, 'production' : { 'BASE_URL' : 'https://www.example.com/wagtail-transfer/' , 'SECRET_KEY' : 'a36476ffc6af34dc935570d97369eca0' , }, } A dictionary defining the sites available to import from, and their secret keys.","title":"WAGTAILTRANSFER_SOURCES"},{"location":"settings/#wagtailtransfer_update_related_models","text":"WAGTAILTRANSFER_UPDATE_RELATED_MODELS = [ 'wagtailimages.image' , 'adverts.advert' ] Specifies a list of models that, whenever we encounter references to them in imported content, should be updated to the latest version from the source site as part of the import. Whenever an object being imported contains a reference to a related object (through a ForeignKey, RichTextField or StreamField), the 'importance' of that related object will tend to vary according to its type. For example, a reference to an Image object within a page usually means that the image will be shown on that page; in this case, the Image model is sufficiently important to the imported page that we want the importer to not only ensure that image exists at the destination, but is updated to its newest version as well. Contrast this with the example of an 'author' snippet attached to blog posts, containing various fields of data about that person (e.g. bio, social media links); in this case, the author information is not really part of the blog post, and it's not expected that we would update it when running an import of blog posts.","title":"WAGTAILTRANSFER_UPDATE_RELATED_MODELS"},{"location":"settings/#wagtailtransfer_lookup_fields","text":"WAGTAILTRANSFER_LOOKUP_FIELDS = { 'blog.author' : [ 'first_name' , 'surname' ]} Specifies a list of fields to use for object lookups on the given models. Normally, imported objects will be assigned a random UUID known across all sites, so that those objects can be recognised on subsequent imports and be updated rather than creating a duplicate. This behaviour is less useful for models that already have a uniquely identifying field, or set of fields, such as an author identified by first name and surname - if the same author exists on the source and destination site, but this was not the result of a previous import, then the UUID-based matching will consider them distinct, and attempt to create a duplicate author record at the destination. Adding an entry in WAGTAILTRANSFER_LOOKUP_FIELDS will mean that any imported instances of the given model will be looked up based on the specified fields, rather than by UUID.","title":"WAGTAILTRANSFER_LOOKUP_FIELDS"},{"location":"settings/#wagtailtransfer_no_follow_models","text":"WAGTAILTRANSFER_NO_FOLLOW_MODELS = [ 'wagtailcore.page' , 'organisations.Company' ] Specifies a list of models that should not be imported by association when they are referenced from imported content. Defaults to ['wagtailcore.page'] . By default, objects referenced within imported content will be recursively imported to ensure that those references are still valid on the destination site. However, this is not always desirable - for example, if this happened for the Page model, this would imply that any pages linked from an imported page would get imported as well, along with any pages linked from those pages, and so on, leading to an unpredictable number of extra pages being added anywhere in the page tree as a side-effect of the import. Models listed in WAGTAILTRANSFER_NO_FOLLOW_MODELS will thus be skipped in this process, leaving the reference unresolved. The effect this has on the referencing page will vary according to the kind of relation: nullable foreign keys, one-to-many and many-to-many relations will simply omit the missing object; references in rich text and StreamField will become broken links (just as linking a page and then deleting it would); while non-nullable foreign keys will prevent the object from being created at all (meaning that any objects referencing that object will end up with unresolved references, to be handled by the same set of rules). Note that these settings do not accept models that are defined as subclasses through multi-table inheritance - in particular, they cannot be used to define behaviour that only applies to specific subclasses of Page.","title":"WAGTAILTRANSFER_NO_FOLLOW_MODELS"},{"location":"setup/","text":"Setup Clone the Wagtail Transfer repository . In the terminal, navigate to the root of the cloned repository and run pip install -e . Add wagtail_transfer to your project's INSTALLED_APPS . In your project's top-level urls.py, add: from wagtail_transfer import urls as wagtailtransfer_urls and add: url(r'^wagtail-transfer/', include(wagtailtransfer_urls)), to the urlpatterns list above include(wagtail_urls) . Add the settings WAGTAILTRANSFER_SOURCES and WAGTAILTRANSFER_SECRET_KEY to your project settings. These are formatted as: WAGTAILTRANSFER_SOURCES = { 'staging' : { 'BASE_URL' : 'https://staging.example.com/wagtail-transfer/' , 'SECRET_KEY' : '4ac4822149691395773b2a8942e1a472' , } , 'production' : { 'BASE_URL' : 'https://www.example.com/wagtail-transfer/' , 'SECRET_KEY' : 'a36476ffc6af34dc935570d97369eca0' , } , } WAGTAILTRANSFER_SECRET_KEY = '7cd5de8229be75e1e0c2af8abc2ada7e' However, it is best to store the SECRET_KEY s themselves in local environment variables for security. WAGTAILTRANSFER_SOURCES is a dictionary defining the sites available to import from, and their secret keys. WAGTAILTRANSFER_SECRET_KEY and the per-source SECRET_KEY settings are used to authenticate the communication between the source and destination instances; this prevents unauthorised users from using this API to retrieve sensitive data such as password hashes. The SECRET_KEY for each entry in WAGTAILTRANSFER_SOURCES must match that instance's WAGTAILTRANSFER_SECRET_KEY . Once you've followed these instructions for all your source and destination sites, you can start importing content . If you need additional configuration - you want to configure which referenced models are updated, how models are identified between Wagtail instances, or which models are pulled in and imported from references on an imported page, you can check out how mappings and references work and the settings reference .","title":"Setup"},{"location":"setup/#setup","text":"Clone the Wagtail Transfer repository . In the terminal, navigate to the root of the cloned repository and run pip install -e . Add wagtail_transfer to your project's INSTALLED_APPS . In your project's top-level urls.py, add: from wagtail_transfer import urls as wagtailtransfer_urls and add: url(r'^wagtail-transfer/', include(wagtailtransfer_urls)), to the urlpatterns list above include(wagtail_urls) . Add the settings WAGTAILTRANSFER_SOURCES and WAGTAILTRANSFER_SECRET_KEY to your project settings. These are formatted as: WAGTAILTRANSFER_SOURCES = { 'staging' : { 'BASE_URL' : 'https://staging.example.com/wagtail-transfer/' , 'SECRET_KEY' : '4ac4822149691395773b2a8942e1a472' , } , 'production' : { 'BASE_URL' : 'https://www.example.com/wagtail-transfer/' , 'SECRET_KEY' : 'a36476ffc6af34dc935570d97369eca0' , } , } WAGTAILTRANSFER_SECRET_KEY = '7cd5de8229be75e1e0c2af8abc2ada7e' However, it is best to store the SECRET_KEY s themselves in local environment variables for security. WAGTAILTRANSFER_SOURCES is a dictionary defining the sites available to import from, and their secret keys. WAGTAILTRANSFER_SECRET_KEY and the per-source SECRET_KEY settings are used to authenticate the communication between the source and destination instances; this prevents unauthorised users from using this API to retrieve sensitive data such as password hashes. The SECRET_KEY for each entry in WAGTAILTRANSFER_SOURCES must match that instance's WAGTAILTRANSFER_SECRET_KEY . Once you've followed these instructions for all your source and destination sites, you can start importing content . If you need additional configuration - you want to configure which referenced models are updated, how models are identified between Wagtail instances, or which models are pulled in and imported from references on an imported page, you can check out how mappings and references work and the settings reference .","title":"Setup"}]}